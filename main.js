'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var OBLIQUE_STRATEGIES = ["Abandon normal instruments.", "Accept advice.", "Accretion.", "A line has two sides.", "Balance the consistency principle with the inconsistency principle.", "Be dirty.", "Breathe more deeply.", "Bridges -build -burn.", "Cascades.", "Cluster analysis.", "Consider different fading systems.", "Courage!", "Cut a vital connection.", "Decorate, decorate.", "Define an area as 'safe' and use it as an anchor.", "Destroy the most important thing.", "Discard an axiom.", "Disconnect from desire.", "Discover the recipes you are using and abandon them.", "Distorting time.", "Don't be afraid of things because they're easy to do.", "Don't be frightened of cliches.", "Don't be frightened to display your talents.", "Don't stress one thing more than another.", "Do something boring.", "Do the washing up.", "Do the words need changing?", "Do we need holes?", "Emphasize differences.", "Emphasize repetitions.", "Emphasize the flaws.", "Get your neck massaged.", "Give way to your worst impulse.", "Go slowly all the way round the outside.", "Honor thy error as a hidden intention.", "How would you have done it?", "Humanize something free of error.", "Infinitesimal gradations.", "Into the impossible.", "Is it finished?", "Is there something missing?", "Just carry on.", "Left channel, right channel, centre channel.", "Look at a very small object, look at its centre.", "Look at the order in which you do things.", "Look closely at the most embarrassing details and amplify them.", "Make a blank valuable by putting it in an exquisite frame.", "Make an exhaustive list of everything you might do and do the last thing on the list.", "Make a sudden, destructive unpredictable action; incorporate.", "Only one element of each kind.", "Remember those quiet evenings.", "Remove ambiguities and convert to specifics.", "Remove specifics and convert to ambiguities.", "Repetition is a form of change.", "Reverse.", "Simple subtraction.", "Spectrum analysis.", "Take a break.", "Take away the elements in order of apparent non-importance.", "Tidy up.", "Turn it upside down.", "Twist the spine.", "Use an old idea.", "Use an unacceptable color.", "Water.", "What are you really thinking about just now? Incorporate.", "What is the reality of the situation?", "What mistakes did you make last time?", "What wouldn't you do?", "Work at a different speed."];
var CONVERSATION_STARTERS = ["If You Had Three Wishes, What Would You Wish For?", "What Would You Rather Throw Away: Love Or Money?", "What's The Most Beautiful Place You've Ever Seen?", "What Was Your Fondest Memory Of High School?", "What's Your Favorite TV Show?", "What's The Strangest Thing In Your Refrigerator?", "Would You Rather Hear The Music Of Johann Sebastian Bach Played By A Barbershop Quartet, Or A Heavy Metal Band?", "Have You Ever Been To A Five Star Resort?", "What Was Your Favorite Toy Growing Up?", "What's The Funniest Way You've Ever Broken The Law?", "What's Your Favorite Sports Team?", "What Talent Would You Want To Possess If You Could?", "If You Could Trade Lives With Someone, Who Would It Be?", "If You Could Erase One Event From History, Which One Would You Erase?", "What Was Your Favorite Toy As A Child?", "Who Do You Most Like To Poke Fun At?", "If You Were Suddenly Transported To Another Planet, How Would You Assess The Situation?", "When Do You Feel The Most In Control?", "Would You Rather Have 10 Hobbies Or One Passion?", "What's Your Favorite Movie?", "If You Could Interview A Famous Person, Who Would You Choose?", "If Your Food Is Bad At A Restaurant, Would You Say Something?", "If You Could Only Use One Word The Rest Of Your Life, What Word Would You Choose?", "What Are Your Dreams And Ambitions?", "You've Been Given An Elephant. You Can't Get Rid Of It. What Would You Do With It?", "What's The Funniest Thing You've Seen On The News?", "If You Had The World's Attention For 30 Seconds, What Would You Say?", "If You Could Be Best Friends With A Celebrity, Who Would It Be?", "If You Were To Play A Song You Love Right Now, What Would It Be?", "Would You Rather Look Like A Potato, Or Feel Like A Potato?", "What Would You Do With 10 Million Dollars?", "How Can You Tell If Someone Has A Sense Of Humor?", "If You Were To Name Your Own Song, What Would You Name It?", "If You Were In A Room Filled With You And Your Doppelganger And 2 Million Dollars, What Would You Do?", "What Is In Your Fridge Right Now?", "What Have You Learned About Life From Kids?", "How Would You Want To Be Remembered?", "What Do You Hope Your Deceased Relative Would Say About You If They Saw You Now?", "If You Could Change Your Name, What Would You Change It To?", "What's The Strangest Thing That You've Ever Fallen In Love With?", "If You Could Have Any Super Power, Which One Would You Choose?", "If You Were Invited To Attend Hogwarts, Which Hogwarts House Would You Choose?", "What Were The Highlights Of Your Childhood?", "Have You Ever Kept A Secret For More Than A Decade?", "What's The Most Important Thing You've Learned From A Celebrity?", "Do You Care About Reviews?", "What Would Be The Perfect Crime?", "What's The Stupidest Thing You've Ever Done?", "Spontaneity Or Stability?", "What's The Funniest Movie You've Ever Seen?", "When Did You Last Meet A Stranger You Thought You'd Never Meet Again?", "Do You Save Or Spend?", "How Much Does The Amount Of Traffic Affect Your Mood?", "If You Had To Choose One Animal To Have As A Pet, Which Animal Would You Choose?", "What's Your Worst Habit?", "Do they like to take a stand or just let things go?", "What's Your Favorite Song?", "How Do You Think The World Would Be Different If Bananas Were Illegal?", "Would You Rather Be Able To Control Time, Or Be Able To Know What Other People Are Thinking?", "Is It Difficult To Do What You Do?", "Who Is Your Favorite Celebrity?", "If You Found $2,000 On The Ground, What Would You Do With It?", "What's Your Favorite Pizza Topping?", "What Would You Do If You Could Possess The Abilities Of Your Dog?", "What's The Smartest Thing You've Ever Done?"];
var ShufflePluginSettings = /** @class */ (function () {
    function ShufflePluginSettings() {
        this.variable1Name = "WORD";
        this.variable1Values = "Cat\nDog\nKing\nFire\nPaper\nWall\nBook\nWind";
        this.variable2Name = "LETTER";
        this.variable2Values = "a\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl";
        this.variable3Name = "LOCATION";
        this.variable3Values = "New York\nLos Angeles\nLondon\nParis\nBerlin";
        this.shuffleNoteTemplate = "## Prompt\n1. Include one of these words: $WORD, $WORD or $WORD\n2. Begin with a word that starts with `$LETTER`\n3. Take place in $LOCATION or $LOCATION\n";
    }
    return ShufflePluginSettings;
}());
var ShufflePlugin = /** @class */ (function (_super) {
    __extends(ShufflePlugin, _super);
    function ShufflePlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShufflePlugin.prototype.onload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this.loadSettings();
                this.addSettingTab(new ShufflePluginSettingTab(this.app, this));
                this.addRibbonIcon('dice', 'Shuffle Plugin', function () {
                    _this.createShuffleNote();
                });
                return [2 /*return*/];
            });
        });
    };
    ShufflePlugin.prototype.onunload = function () { };
    ShufflePlugin.prototype.saveSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.saveData(this.settings)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ShufflePlugin.prototype.loadSettings = function () {
        var _this = this;
        this.settings = new ShufflePluginSettings();
        (function () { return __awaiter(_this, void 0, void 0, function () {
            var loadedSettings;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadData()];
                    case 1:
                        loadedSettings = _a.sent();
                        if (!loadedSettings) return [3 /*break*/, 2];
                        this.settings.variable1Name = loadedSettings.variable1Name;
                        this.settings.variable1Values = loadedSettings.variable1Values;
                        this.settings.variable2Name = loadedSettings.variable2Name;
                        this.settings.variable2Values = loadedSettings.variable2Values;
                        this.settings.variable3Name = loadedSettings.variable3Name;
                        this.settings.variable3Values = loadedSettings.variable3Values;
                        this.settings.shuffleNoteTemplate = loadedSettings.shuffleNoteTemplate;
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.saveData(this.settings)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        }); })();
    };
    ShufflePlugin.prototype.createShuffleNote = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result, variable1, values1, variable2, values2, variable3, values3, fileName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        result = this.settings.shuffleNoteTemplate;
                        variable1 = "$" + this.settings.variable1Name;
                        values1 = this.settings.variable1Values.split("\n");
                        variable2 = "$" + this.settings.variable2Name;
                        values2 = this.settings.variable2Values.split("\n");
                        variable3 = "$" + this.settings.variable3Name;
                        values3 = this.settings.variable3Values.split("\n");
                        if (values1.length > 0)
                            result = this.replaceVariablesInTemplate(result, variable1, values1);
                        if (values2.length > 0)
                            result = this.replaceVariablesInTemplate(result, variable2, values2);
                        if (values3.length > 0)
                            result = this.replaceVariablesInTemplate(result, variable3, values3);
                        fileName = "Shuffle Note - " + Date.now() + " .md";
                        return [4 /*yield*/, this.saveShuffleNote(fileName, result)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.app.workspace.openLinkText(fileName, '', true)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ShufflePlugin.prototype.replaceVariablesInTemplate = function (template, variable, values) {
        while (template.includes(variable)) {
            template = template.replace(variable, this.pickRandomly(values));
        }
        return template;
    };
    ShufflePlugin.prototype.saveShuffleNote = function (filePath, mdString) {
        return __awaiter(this, void 0, void 0, function () {
            var fileExists;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.app.vault.adapter.exists(filePath)];
                    case 1:
                        fileExists = _a.sent();
                        if (!fileExists) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.app.vault.adapter.read(filePath)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.app.vault.adapter.write(filePath, mdString)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, this.app.vault.create(filePath, mdString)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    // @ts-ignore
    ShufflePlugin.prototype.shuffle = function (array) {
        for (var i = array.length - 1; i > 0; i--) {
            var j = Math.floor(Math.random() * i);
            var temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
        return array;
    };
    // @ts-ignore
    ShufflePlugin.prototype.pickRandomly = function (array) {
        return this.shuffle(array)[0];
    };
    return ShufflePlugin;
}(obsidian.Plugin));
var ShufflePluginSettingTab = /** @class */ (function (_super) {
    __extends(ShufflePluginSettingTab, _super);
    function ShufflePluginSettingTab(app, plugin) {
        var _this = _super.call(this, app, plugin) || this;
        _this.plugin = plugin;
        return _this;
    }
    ShufflePluginSettingTab.prototype.loadPrompts = function (variable1Name, variable1Values, template) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.plugin.settings.variable1Name = variable1Name;
                        this.plugin.settings.variable1Values = variable1Values.join("\n");
                        this.plugin.settings.variable2Name = "";
                        this.plugin.settings.variable2Values = "";
                        this.plugin.settings.variable3Name = "";
                        this.plugin.settings.variable3Values = "";
                        this.plugin.settings.shuffleNoteTemplate = template;
                        return [4 /*yield*/, this.plugin.saveSettings()];
                    case 1:
                        _a.sent();
                        this.display();
                        return [2 /*return*/];
                }
            });
        });
    };
    ShufflePluginSettingTab.prototype.loadConversationStarters = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.loadPrompts("CONVERSATION_STARTER", CONVERSATION_STARTERS, "## $CONVERSATION_STARTER");
                return [2 /*return*/];
            });
        });
    };
    ShufflePluginSettingTab.prototype.loadObliqueStrategies = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.loadPrompts("OBLIQUE_STRATEGY", OBLIQUE_STRATEGIES, "\"$OBLIQUE_STRATEGY\"");
                return [2 /*return*/];
            });
        });
    };
    ShufflePluginSettingTab.prototype.display = function () {
        var _this = this;
        var containerEl = this.containerEl;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Shuffle Settings' });
        containerEl.createEl("h3", { text: "Featured Prompts" });
        containerEl.createEl("p", { text: "Try out new prompts by loading them into your settings. Will replace your custom prompts." });
        containerEl.createEl("button", { text: "⚫️ Load \"Oblique Strategies\" by Brian Eno and Peter Schmidt" })
            .addEventListener("mousedown", this.loadObliqueStrategies.bind(this));
        containerEl.createEl("button", { text: "❓️ Load \"Conversation Starters\" by Brightful.com" })
            .addEventListener("mousedown", this.loadConversationStarters.bind(this));
        containerEl.createEl("h3", { text: "Customize Your Prompts" });
        new obsidian.Setting(containerEl)
            .setName('Variable #1 Name')
            .setDesc('For example, enter WORD here and then, in your template, use $WORD to invoke a randomly selected value.')
            .addText(function (text) { return text
            .setPlaceholder('')
            .setValue(_this.plugin.settings.variable1Name)
            .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.plugin.settings.variable1Name = value;
                        return [4 /*yield*/, this.plugin.saveSettings()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }); });
        new obsidian.Setting(containerEl)
            .setName('Variable #1 Values')
            .setDesc('Create a list of values that variable #1 will be randomly replaced with in your template. One value per line.')
            .addTextArea(function (text) { return text
            .setPlaceholder('Dog\nCat\nBefore dawn\nWith fire')
            .setValue(_this.plugin.settings.variable1Values)
            .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.plugin.settings.variable1Values = value;
                        return [4 /*yield*/, this.plugin.saveSettings()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }); });
        new obsidian.Setting(containerEl)
            .setName('Variable #2 Name')
            .setDesc('For example, enter LOCATION here and then, in your template, use $LOCATION to invoke a randomly selected value.')
            .addText(function (text) { return text
            .setPlaceholder('')
            .setValue(_this.plugin.settings.variable2Name)
            .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.plugin.settings.variable2Name = value;
                        return [4 /*yield*/, this.plugin.saveSettings()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }); });
        new obsidian.Setting(containerEl)
            .setName('Variable #2 Values')
            .setDesc('Create a list of values that variable #1 will be randomly replaced with in your template. One value per line.')
            .addTextArea(function (text) { return text
            .setPlaceholder('New York\nAustin\nParis\nBerlin')
            .setValue(_this.plugin.settings.variable2Values)
            .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.plugin.settings.variable2Values = value;
                        return [4 /*yield*/, this.plugin.saveSettings()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }); });
        new obsidian.Setting(containerEl)
            .setName('Variable #3 Name')
            .setDesc('For example, enter ACTION here and then, in your template, use $ACTION to invoke a randomly selected value.')
            .addText(function (text) { return text
            .setPlaceholder('')
            .setValue(_this.plugin.settings.variable3Name)
            .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.plugin.settings.variable3Name = value;
                        return [4 /*yield*/, this.plugin.saveSettings()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }); });
        new obsidian.Setting(containerEl)
            .setName('Variable #3 Values')
            .setDesc('Create a list of values that variable #1 will be randomly replaced with in your template. One value per line.')
            .addTextArea(function (text) { return text
            .setPlaceholder('Run\nHide\nBuy\nCut')
            .setValue(_this.plugin.settings.variable3Values)
            .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.plugin.settings.variable3Values = value;
                        return [4 /*yield*/, this.plugin.saveSettings()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }); });
        new obsidian.Setting(containerEl)
            .setName('Shuffle Note Template')
            .setDesc('Create your own template for your writing prompts using your variables.')
            .addTextArea(function (text) { return text
            .setPlaceholder('Include these 3 words: $WORD $WORD $WORD $WORD $WORD\n')
            .setValue(_this.plugin.settings.shuffleNoteTemplate)
            .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.plugin.settings.shuffleNoteTemplate = value;
                        return [4 /*yield*/, this.plugin.saveSettings()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }); });
    };
    return ShufflePluginSettingTab;
}(obsidian.PluginSettingTab));

module.exports = ShufflePlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
